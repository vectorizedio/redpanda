# Copyright 2020 Vectorized, Inc.
#
# Use of this software is governed by the Business Source License
# included in the file licenses/BSL.md
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0

name: build-test
on: [push, pull_request]

jobs:
  build:
    name: build
    runs-on: ubuntu-20.04

    steps:
        - name: checkout
          uses: actions/checkout@v2

        - name: freeup space
          run: |
            sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
            sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

        - name: install dependencies
          run: |
            sudo apt update
            sudo apt install -y ccache
            sudo ./install-dependencies.sh

        - name: ccache cache files
          uses: actions/cache@v2
          with:
            path: ~/.ccache
            key: ccache-${{ github.ref }}
            restore-keys: ccache

        - name: install g++-11
          run: |
            sudo apt install -y software-properties-common
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt install g++-11

            sudo update-alternatives \
              --install /usr/bin/gcc gcc /usr/bin/gcc-11 60 \
              --slave /usr/bin/g++ g++ /usr/bin/g++-11
            sudo update-alternatives --auto gcc

        - name: build and test
          run: |
            # at the time of this writing the ccache for a full build is about
            # 70MB (due to the compression) but it may grow if there are many
            # commits with changes within 1 branch and thus the 200MB upper limit
            export CCACHE_COMPRESS=true
            export CCACHE_COMPRESSLEVEL=6
            export CCACHE_MAXSIZE=200M
            export CCACHE_DIR="~/.ccache"

            ccache -p # print the config
            ccache -s # print the stats before reusing
            ccache -z # zero the stats

            ./build.sh

            ccache -s # print the stats after the build
